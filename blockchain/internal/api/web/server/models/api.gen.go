// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package models

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ProofType.
const (
	ProofTypeEcdsaSecp256r1Signature2019 ProofType = "EcdsaSecp256r1Signature2019"
)

// Defines values for DidSchemaContext.
const (
	DidSchemaContextHttplocalhost8443docsdidSchemaHtml DidSchemaContext = "http://localhost:8443/docs/did.schema.html"
	DidSchemaContextHttpswwwW3Org2018credentialsv1     DidSchemaContext = "https://www.w3.org/2018/credentials/v1"
)

// Defines values for VcBmsSchemaContext.
const (
	VcBmsSchemaContextHttplocalhost8443docsvcBmsProductionSchemaHtml VcBmsSchemaContext = "http://localhost:8443/docs/vc.bmsProduction.schema.html"
	VcBmsSchemaContextHttpswwwW3Org2018credentialsv1                 VcBmsSchemaContext = "https://www.w3.org/2018/credentials/v1"
)

// Defines values for VcCloudSchemaContext.
const (
	VcCloudSchemaContextHttplocalhost8443docsvcCloudInstanceSchemaHtml VcCloudSchemaContext = "http://localhost:8443/docs/vc.cloudInstance.schema.html"
	VcCloudSchemaContextHttpswwwW3Org2018credentialsv1                 VcCloudSchemaContext = "https://www.w3.org/2018/credentials/v1"
)

// Defines values for VcServiceSchemaContext.
const (
	VcServiceSchemaContextHttplocalhost8443docsvcServiceAccessSchemaHtml VcServiceSchemaContext = "http://localhost:8443/docs/vc.serviceAccess.schema.html"
	VcServiceSchemaContextHttpswwwW3Org2018credentialsv1                 VcServiceSchemaContext = "https://www.w3.org/2018/credentials/v1"
)

// Defines values for VcServiceSchemaCredentialSubjectAccessLevel.
const (
	Read  VcServiceSchemaCredentialSubjectAccessLevel = "read"
	Write VcServiceSchemaCredentialSubjectAccessLevel = "write"
)

// Defines values for VpBmsSchemaContext.
const (
	VpBmsSchemaContextHttplocalhost8443docsvpSchemaHtml VpBmsSchemaContext = "http://localhost:8443/docs/vp.schema.html"
	VpBmsSchemaContextHttpswwwW3Org2018credentialsv1    VpBmsSchemaContext = "https://www.w3.org/2018/credentials/v1"
)

// Defines values for VpBmsSchemaProofType.
const (
	VpBmsSchemaProofTypeEcdsaSecp256r1Signature2019 VpBmsSchemaProofType = "EcdsaSecp256r1Signature2019"
)

// Defines values for VpCloudSchemaContext.
const (
	VpCloudSchemaContextHttplocalhost8443docsvpSchemaHtml VpCloudSchemaContext = "http://localhost:8443/docs/vp.schema.html"
	VpCloudSchemaContextHttpswwwW3Org2018credentialsv1    VpCloudSchemaContext = "https://www.w3.org/2018/credentials/v1"
)

// Defines values for VpCloudSchemaProofType.
const (
	VpCloudSchemaProofTypeEcdsaSecp256r1Signature2019 VpCloudSchemaProofType = "EcdsaSecp256r1Signature2019"
)

// Defines values for VpServiceSchemaContext.
const (
	Httplocalhost8443docsvpSchemaHtml VpServiceSchemaContext = "http://localhost:8443/docs/vp.schema.html"
	HttpswwwW3Org2018credentialsv1    VpServiceSchemaContext = "https://www.w3.org/2018/credentials/v1"
)

// Defines values for VpServiceSchemaProofType.
const (
	VpServiceSchemaProofTypeEcdsaSecp256r1Signature2019 VpServiceSchemaProofType = "EcdsaSecp256r1Signature2019"
)

// N256Hash A SHA-256 hash of the complete VC in hexadecimal format.
type N256Hash = string

// DID DID string with the DID method `batterypass` followed by one of `eu, oem, cloud, bms, service` and then an identifier
type DID = string

// DIDBMS DID string with the DID method `batterypass` for a specific bms and then an identifier
type DIDBMS = string

// DIDCLOUD DID string with the DID method `batterypass` for a specific cloud and then an identifier
type DIDCLOUD = string

// DIDOEM DID string with the DID method `batterypass` for a specific oem and then an identifier
type DIDOEM = string

// DIDSERVICE DID string with the DID method `batterypass` for a specific service and then an identifier
type DIDSERVICE = string

// DateTime defines model for DateTime.
type DateTime = time.Time

// Proof Cryptographic proof that makes the subject verifiable.
type Proof struct {
	// Challenge Optional challenge to prevent replay attacks.
	Challenge *string   `json:"challenge,omitempty"`
	Created   time.Time `json:"created"`

	// Jws The actual signature in JSON Web Signature format
	Jws          string    `json:"jws"`
	ProofPurpose string    `json:"proofPurpose"`
	Type         ProofType `json:"type"`

	// VerificationMethod Reference to the key used to create the proof.
	VerificationMethod string `json:"verificationMethod"`
}

// ProofType defines model for Proof.Type.
type ProofType string

// ServiceEndpoint Represents a service associated with the DID subject, such as a metadata or data access point.
type ServiceEndpoint struct {
	// Id Identifier for the service endpoint, typically a DID fragment.
	Id string `json:"id"`

	// ServiceEndpoint The actual service endpoint, which can be a URL.
	ServiceEndpoint string `json:"serviceEndpoint"`

	// Type Type or category of the service, e.g., 'BatteryDataService'.
	Type string `json:"type"`
}

// URI An identifier in uri format for Verifiable Credentials
type URI = string

// DidSchema Minimal on-chain DID record with a revocation tag.
type DidSchema struct {
	// Context Defines the JSON-LD context, providing meaning to terms used in the did.
	Context []DidSchemaContext `json:"@context"`

	// Id DID string with the DID method `batterypass` followed by one of `eu, oem, cloud, bms, service` and then an identifier
	Id DID `json:"id"`

	// Revoked Boolean flag indicating whether this DID has been revoked.
	Revoked bool `json:"revoked"`

	// Service Optional array of service endpoints related to the DID subject, such as APIs or metadata services.
	Service   *[]ServiceEndpoint `json:"service,omitempty"`
	Timestamp DateTime           `json:"timestamp"`

	// VerificationMethod A method by which a DID subject can be authenticated, typically using cryptographic keys.
	VerificationMethod VerificationMethod `json:"verificationMethod"`
}

// DidSchemaContext defines model for DidSchema.Context.
type DidSchemaContext string

// RequestDidCreateormodifySchema defines model for request.did.createormodify.schema.
type RequestDidCreateormodifySchema struct {
	// Payload Minimal on-chain DID record with a revocation tag.
	Payload DidSchema `json:"payload"`

	// Proof Cryptographic proof that makes the subject verifiable.
	Proof Proof `json:"proof"`
}

// RequestDidRevokeSchema defines model for request.did.revoke.schema.
type RequestDidRevokeSchema struct {
	// Payload DID string with the DID method `batterypass` followed by one of `eu, oem, cloud, bms, service` and then an identifier
	Payload DID `json:"payload"`

	// Proof Cryptographic proof that makes the subject verifiable.
	Proof Proof `json:"proof"`
}

// RequestVcRevokeSchema defines model for request.vc.revoke.schema.
type RequestVcRevokeSchema struct {
	// Payload An identifier in uri format for Verifiable Credentials
	Payload URI `json:"payload"`

	// Proof Cryptographic proof that makes the subject verifiable.
	Proof Proof `json:"proof"`
}

// ResponseBlockSchema defines model for response.block.schema.
type ResponseBlockSchema struct {
	// Hash A SHA-256 hash of the complete VC in hexadecimal format.
	Hash  N256Hash `json:"Hash"`
	Index int      `json:"Index"`

	// MerkleRoot A SHA-256 hash of the complete VC in hexadecimal format.
	MerkleRoot N256Hash `json:"MerkleRoot"`

	// PreviousBlockHash A SHA-256 hash of the complete VC in hexadecimal format.
	PreviousBlockHash N256Hash `json:"PreviousBlockHash"`
	Timestamp         DateTime `json:"Timestamp"`

	// Transactions An array holding transactions contained in a block (DID Documents, VC Records)
	Transactions ResponseTransactionsSchema `json:"Transactions"`
}

// ResponseBlocksSchema An array holding transactions contained in a block (DID Documents, VC Records)
type ResponseBlocksSchema = []ResponseBlockSchema

// ResponseDidsSchema An array holding all DIDs in the blockchain
type ResponseDidsSchema = []DidSchema

// ResponseErrorSchema A standard error response structure for HTTP APIs.
type ResponseErrorSchema struct {
	// Details Optional detailed information about the error, typically for validation failures.
	Details *[]struct {
		// Context The JSON pointer to the location within the data structure where the error occurred (e.g., '/items/0/properties/amount').
		Context *string `json:"context,omitempty"`

		// Description A specific description of the validation error.
		Description string `json:"description"`

		// Field The specific field or path in the request/response that caused the error (e.g., 'name', '/address/street').
		Field string `json:"field"`

		// Type The type of validation rule that failed (e.g., 'pattern', 'required', 'minimum').
		Type *string `json:"type,omitempty"`

		// Value The problematic value that caused the validation error, formatted as a string.
		Value *string `json:"value,omitempty"`
	} `json:"details,omitempty"`

	// Message A human-readable error message.
	Message string `json:"message"`
}

// ResponseOkSchema A standard OK response structure for HTTP APIs.
type ResponseOkSchema struct {
	// Message A human-readable confirmation message.
	Message string `json:"message"`
}

// ResponseTransactionsSchema An array holding transactions contained in a block (DID Documents, VC Records)
type ResponseTransactionsSchema = []ResponseTransactionsSchema_Item

// ResponseTransactionsSchema_Item defines model for response.transactions.schema.Item.
type ResponseTransactionsSchema_Item struct {
	union json.RawMessage
}

// ResponseVcsSchema An array holding all VC Records in the blockchain
type ResponseVcsSchema = []VcRecordSchema

// VcBmsSchema Schema for verifying BMS Production claims.
type VcBmsSchema struct {
	// Context Defines the JSON-LD context, providing meaning to terms used in the credential.
	Context           []VcBmsSchemaContext `json:"@context"`
	CredentialSubject struct {
		// BmsDid DID string with the DID method `batterypass` for a specific bms and then an identifier
		BmsDid DIDBMS `json:"bmsDid"`

		// Id DID string with the DID method `batterypass` for a specific oem and then an identifier
		Id        DIDOEM   `json:"id"`
		LotNumber string   `json:"lotNumber"`
		Timestamp DateTime `json:"timestamp"`
		Type      string   `json:"type"`
	} `json:"credentialSubject"`
	ExpirationDate DateTime `json:"expirationDate"`

	// Holder DID string with the DID method `batterypass` for a specific oem and then an identifier
	Holder DIDOEM `json:"holder"`

	// Id An identifier in uri format for Verifiable Credentials
	Id           URI      `json:"id"`
	IssuanceDate DateTime `json:"issuanceDate"`

	// Issuer DID string with the DID method `batterypass` for a specific bms and then an identifier
	Issuer DIDBMS `json:"issuer"`

	// Proof Cryptographic proof that makes the subject verifiable.
	Proof Proof    `json:"proof"`
	Type  []string `json:"type"`
}

// VcBmsSchemaContext defines model for VcBmsSchema.Context.
type VcBmsSchemaContext string

// VcCloudSchema Schema for verifying which cloud instances a BMS should send its battery data to.
type VcCloudSchema struct {
	// Context Defines the JSON-LD context, providing meaning to terms used in the credential.
	Context           []VcCloudSchemaContext `json:"@context"`
	CredentialSubject struct {
		// CloudDid DID string with the DID method `batterypass` for a specific cloud and then an identifier
		CloudDid DIDCLOUD `json:"cloudDid"`

		// Id DID string with the DID method `batterypass` for a specific bms and then an identifier
		Id        DIDBMS   `json:"id"`
		Timestamp DateTime `json:"timestamp"`
		Type      string   `json:"type"`
	} `json:"credentialSubject"`
	ExpirationDate DateTime `json:"expirationDate"`

	// Holder DID string with the DID method `batterypass` for a specific bms and then an identifier
	Holder DIDBMS `json:"holder"`

	// Id An identifier in uri format for Verifiable Credentials
	Id           URI      `json:"id"`
	IssuanceDate DateTime `json:"issuanceDate"`

	// Issuer DID string with the DID method `batterypass` for a specific oem and then an identifier
	Issuer DIDOEM `json:"issuer"`

	// Proof Cryptographic proof that makes the subject verifiable.
	Proof Proof    `json:"proof"`
	Type  []string `json:"type"`
}

// VcCloudSchemaContext defines model for VcCloudSchema.Context.
type VcCloudSchemaContext string

// VcRecordSchema Minimal record of a Verifiable Credential containing only its ID, a hash of the VC, a timestamp, and expiration date.
type VcRecordSchema struct {
	ExpirationDate DateTime `json:"expirationDate"`

	// Id An identifier in uri format for Verifiable Credentials
	Id        URI      `json:"id"`
	Timestamp DateTime `json:"timestamp"`

	// VcHash A SHA-256 hash of the complete VC in hexadecimal format.
	VcHash N256Hash `json:"vcHash"`
}

// VcServiceSchema Schema for verifying Service Access claims.
type VcServiceSchema struct {
	// Context Defines the JSON-LD context, providing meaning to terms used in the credential.
	Context           []VcServiceSchemaContext `json:"@context"`
	CredentialSubject struct {
		AccessLevel []VcServiceSchemaCredentialSubjectAccessLevel `json:"accessLevel"`

		// BmsDid DID string with the DID method `batterypass` for a specific bms and then an identifier
		BmsDid DIDBMS `json:"bmsDid"`

		// Id DID string with the DID method `batterypass` for a specific service and then an identifier
		Id         DIDSERVICE `json:"id"`
		Type       string     `json:"type"`
		ValidFrom  DateTime   `json:"validFrom"`
		ValidUntil DateTime   `json:"validUntil"`
	} `json:"credentialSubject"`
	ExpirationDate DateTime `json:"expirationDate"`

	// Holder DID string with the DID method `batterypass` for a specific service and then an identifier
	Holder DIDSERVICE `json:"holder"`

	// Id An identifier in uri format for Verifiable Credentials
	Id           URI      `json:"id"`
	IssuanceDate DateTime `json:"issuanceDate"`

	// Issuer DID string with the DID method `batterypass` for a specific bms and then an identifier
	Issuer DIDBMS `json:"issuer"`

	// Proof Cryptographic proof that makes the subject verifiable.
	Proof Proof    `json:"proof"`
	Type  []string `json:"type"`
}

// VcServiceSchemaContext defines model for VcServiceSchema.Context.
type VcServiceSchemaContext string

// VcServiceSchemaCredentialSubjectAccessLevel defines model for VcServiceSchema.CredentialSubject.AccessLevel.
type VcServiceSchemaCredentialSubjectAccessLevel string

// VerificationMethod A method by which a DID subject can be authenticated, typically using cryptographic keys.
type VerificationMethod struct {
	// Controller DID that has the ability to make changes to this DID-Document.
	Controller string `json:"controller"`

	// Id Identifier for the verification method, typically a DID fragment.
	Id string `json:"id"`

	// PublicKeyMultibase The public key encoded in multibase format.
	PublicKeyMultibase string `json:"publicKeyMultibase"`

	// Type Type of the verification method, e.g., 'Ed25519VerificationKey2020'.
	Type string `json:"type"`
}

// VpBmsSchema Schema for verifying presentations of VCs with holder proof.
type VpBmsSchema struct {
	// Context Defines the JSON-LD context, providing meaning to terms used in the credential.
	Context []VpBmsSchemaContext `json:"@context"`

	// Holder DID string with the DID method `batterypass` followed by one of `eu, oem, cloud, bms, service` and then an identifier
	Holder DID `json:"holder"`
	Proof  struct {
		// Challenge Optional challenge to prevent replay attacks.
		Challenge string    `json:"challenge"`
		Created   time.Time `json:"created"`

		// Jws The actual signature in JSON Web Signature format
		Jws          string               `json:"jws"`
		ProofPurpose string               `json:"proofPurpose"`
		Type         VpBmsSchemaProofType `json:"type"`

		// VerificationMethod Reference to the key used to create the proof.
		VerificationMethod string `json:"verificationMethod"`
	} `json:"proof"`
	Type                 []string      `json:"type"`
	VerifiableCredential []VcBmsSchema `json:"verifiableCredential"`
}

// VpBmsSchemaContext defines model for VpBmsSchema.Context.
type VpBmsSchemaContext string

// VpBmsSchemaProofType defines model for VpBmsSchema.Proof.Type.
type VpBmsSchemaProofType string

// VpCloudSchema Schema for verifying presentations of VCs with holder proof.
type VpCloudSchema struct {
	// Context Defines the JSON-LD context, providing meaning to terms used in the credential.
	Context []VpCloudSchemaContext `json:"@context"`

	// Holder DID string with the DID method `batterypass` followed by one of `eu, oem, cloud, bms, service` and then an identifier
	Holder DID `json:"holder"`
	Proof  struct {
		// Challenge Optional challenge to prevent replay attacks.
		Challenge string    `json:"challenge"`
		Created   time.Time `json:"created"`

		// Jws The actual signature in JSON Web Signature format
		Jws          string                 `json:"jws"`
		ProofPurpose string                 `json:"proofPurpose"`
		Type         VpCloudSchemaProofType `json:"type"`

		// VerificationMethod Reference to the key used to create the proof.
		VerificationMethod string `json:"verificationMethod"`
	} `json:"proof"`
	Type                 []string        `json:"type"`
	VerifiableCredential []VcCloudSchema `json:"verifiableCredential"`
}

// VpCloudSchemaContext defines model for VpCloudSchema.Context.
type VpCloudSchemaContext string

// VpCloudSchemaProofType defines model for VpCloudSchema.Proof.Type.
type VpCloudSchemaProofType string

// VpServiceSchema Schema for verifying presentations of VCs with holder proof.
type VpServiceSchema struct {
	// Context Defines the JSON-LD context, providing meaning to terms used in the credential.
	Context []VpServiceSchemaContext `json:"@context"`

	// Holder DID string with the DID method `batterypass` followed by one of `eu, oem, cloud, bms, service` and then an identifier
	Holder DID `json:"holder"`
	Proof  struct {
		// Challenge Optional challenge to prevent replay attacks.
		Challenge string    `json:"challenge"`
		Created   time.Time `json:"created"`

		// Jws The actual signature in JSON Web Signature format
		Jws          string                   `json:"jws"`
		ProofPurpose string                   `json:"proofPurpose"`
		Type         VpServiceSchemaProofType `json:"type"`

		// VerificationMethod Reference to the key used to create the proof.
		VerificationMethod string `json:"verificationMethod"`
	} `json:"proof"`
	Type                 []string          `json:"type"`
	VerifiableCredential []VcServiceSchema `json:"verifiableCredential"`
}

// VpServiceSchemaContext defines model for VpServiceSchema.Context.
type VpServiceSchemaContext string

// VpServiceSchemaProofType defines model for VpServiceSchema.Proof.Type.
type VpServiceSchemaProofType string

// CreateOrModifyDidJSONRequestBody defines body for CreateOrModifyDid for application/json ContentType.
type CreateOrModifyDidJSONRequestBody = RequestDidCreateormodifySchema

// RevokeDidJSONRequestBody defines body for RevokeDid for application/json ContentType.
type RevokeDidJSONRequestBody = RequestDidRevokeSchema

// CreateVcRecordBmsJSONRequestBody defines body for CreateVcRecordBms for application/json ContentType.
type CreateVcRecordBmsJSONRequestBody = VcBmsSchema

// CreateVcRecordCloudJSONRequestBody defines body for CreateVcRecordCloud for application/json ContentType.
type CreateVcRecordCloudJSONRequestBody = VcCloudSchema

// CreateVcRecordServicesJSONRequestBody defines body for CreateVcRecordServices for application/json ContentType.
type CreateVcRecordServicesJSONRequestBody = VcServiceSchema

// RevokeVcRecordJSONRequestBody defines body for RevokeVcRecord for application/json ContentType.
type RevokeVcRecordJSONRequestBody = RequestVcRevokeSchema

// VerifyVpBmsJSONRequestBody defines body for VerifyVpBms for application/json ContentType.
type VerifyVpBmsJSONRequestBody = VpBmsSchema

// VerifyVpCloudJSONRequestBody defines body for VerifyVpCloud for application/json ContentType.
type VerifyVpCloudJSONRequestBody = VpCloudSchema

// VerifyVpServicesJSONRequestBody defines body for VerifyVpServices for application/json ContentType.
type VerifyVpServicesJSONRequestBody = VpServiceSchema

// AsDidSchema returns the union data inside the ResponseTransactionsSchema_Item as a DidSchema
func (t ResponseTransactionsSchema_Item) AsDidSchema() (DidSchema, error) {
	var body DidSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDidSchema overwrites any union data inside the ResponseTransactionsSchema_Item as the provided DidSchema
func (t *ResponseTransactionsSchema_Item) FromDidSchema(v DidSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDidSchema performs a merge with any union data inside the ResponseTransactionsSchema_Item, using the provided DidSchema
func (t *ResponseTransactionsSchema_Item) MergeDidSchema(v DidSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVcRecordSchema returns the union data inside the ResponseTransactionsSchema_Item as a VcRecordSchema
func (t ResponseTransactionsSchema_Item) AsVcRecordSchema() (VcRecordSchema, error) {
	var body VcRecordSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVcRecordSchema overwrites any union data inside the ResponseTransactionsSchema_Item as the provided VcRecordSchema
func (t *ResponseTransactionsSchema_Item) FromVcRecordSchema(v VcRecordSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVcRecordSchema performs a merge with any union data inside the ResponseTransactionsSchema_Item, using the provided VcRecordSchema
func (t *ResponseTransactionsSchema_Item) MergeVcRecordSchema(v VcRecordSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponseTransactionsSchema_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponseTransactionsSchema_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all blocks of the blockchain
	// (GET /api/v1/blocks)
	GetAllBlocks(ctx echo.Context) error
	// Get a block of the blockchain by ID
	// (GET /api/v1/blocks/{blockId})
	GetBlockById(ctx echo.Context, blockId int) error
	// Get all transactions of a specific block
	// (GET /api/v1/blocks/{blockId}/transactions)
	GetBlockTransactions(ctx echo.Context, blockId int) error
	// Get all DIDs from the blockchain
	// (GET /api/v1/dids)
	GetAllDids(ctx echo.Context) error
	// Create or modify a DID document
	// (POST /api/v1/dids/createormodify)
	CreateOrModifyDid(ctx echo.Context) error
	// Revoke a DID document
	// (POST /api/v1/dids/revoke)
	RevokeDid(ctx echo.Context) error
	// Get a specific DID Document by its DID
	// (GET /api/v1/dids/{did})
	GetDidById(ctx echo.Context, did string) error
	// Get a all VC Records
	// (GET /api/v1/vcs)
	GetAllVcRecords(ctx echo.Context) error
	// Create a VC Record for a BMS
	// (POST /api/v1/vcs/create/bms)
	CreateVcRecordBms(ctx echo.Context) error
	// Create a VC Record for a Cloud
	// (POST /api/v1/vcs/create/cloud)
	CreateVcRecordCloud(ctx echo.Context) error
	// Create a VC Record for a Services
	// (POST /api/v1/vcs/create/services)
	CreateVcRecordServices(ctx echo.Context) error
	// Revoke a VC Record
	// (POST /api/v1/vcs/revoke)
	RevokeVcRecord(ctx echo.Context) error
	// Get a specific VC Record by URI
	// (GET /api/v1/vcs/{vcUri})
	GetVcRecordById(ctx echo.Context, vcUri string) error
	// Verify a VP Record for Bms
	// (POST /api/v1/vps/verify/bms)
	VerifyVpBms(ctx echo.Context) error
	// Verify a VP Record for Cloud
	// (POST /api/v1/vps/verify/cloud)
	VerifyVpCloud(ctx echo.Context) error
	// Verify a VP Record for Services
	// (POST /api/v1/vps/verify/services)
	VerifyVpServices(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllBlocks converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllBlocks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllBlocks(ctx)
	return err
}

// GetBlockById converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "blockId" -------------
	var blockId int

	err = runtime.BindStyledParameterWithOptions("simple", "blockId", ctx.Param("blockId"), &blockId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockById(ctx, blockId)
	return err
}

// GetBlockTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "blockId" -------------
	var blockId int

	err = runtime.BindStyledParameterWithOptions("simple", "blockId", ctx.Param("blockId"), &blockId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockTransactions(ctx, blockId)
	return err
}

// GetAllDids converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllDids(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllDids(ctx)
	return err
}

// CreateOrModifyDid converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrModifyDid(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrModifyDid(ctx)
	return err
}

// RevokeDid converts echo context to params.
func (w *ServerInterfaceWrapper) RevokeDid(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RevokeDid(ctx)
	return err
}

// GetDidById converts echo context to params.
func (w *ServerInterfaceWrapper) GetDidById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithOptions("simple", "did", ctx.Param("did"), &did, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDidById(ctx, did)
	return err
}

// GetAllVcRecords converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllVcRecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllVcRecords(ctx)
	return err
}

// CreateVcRecordBms converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVcRecordBms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateVcRecordBms(ctx)
	return err
}

// CreateVcRecordCloud converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVcRecordCloud(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateVcRecordCloud(ctx)
	return err
}

// CreateVcRecordServices converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVcRecordServices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateVcRecordServices(ctx)
	return err
}

// RevokeVcRecord converts echo context to params.
func (w *ServerInterfaceWrapper) RevokeVcRecord(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RevokeVcRecord(ctx)
	return err
}

// GetVcRecordById converts echo context to params.
func (w *ServerInterfaceWrapper) GetVcRecordById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vcUri" -------------
	var vcUri string

	err = runtime.BindStyledParameterWithOptions("simple", "vcUri", ctx.Param("vcUri"), &vcUri, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vcUri: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVcRecordById(ctx, vcUri)
	return err
}

// VerifyVpBms converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyVpBms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyVpBms(ctx)
	return err
}

// VerifyVpCloud converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyVpCloud(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyVpCloud(ctx)
	return err
}

// VerifyVpServices converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyVpServices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyVpServices(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/blocks", wrapper.GetAllBlocks)
	router.GET(baseURL+"/api/v1/blocks/:blockId", wrapper.GetBlockById)
	router.GET(baseURL+"/api/v1/blocks/:blockId/transactions", wrapper.GetBlockTransactions)
	router.GET(baseURL+"/api/v1/dids", wrapper.GetAllDids)
	router.POST(baseURL+"/api/v1/dids/createormodify", wrapper.CreateOrModifyDid)
	router.POST(baseURL+"/api/v1/dids/revoke", wrapper.RevokeDid)
	router.GET(baseURL+"/api/v1/dids/:did", wrapper.GetDidById)
	router.GET(baseURL+"/api/v1/vcs", wrapper.GetAllVcRecords)
	router.POST(baseURL+"/api/v1/vcs/create/bms", wrapper.CreateVcRecordBms)
	router.POST(baseURL+"/api/v1/vcs/create/cloud", wrapper.CreateVcRecordCloud)
	router.POST(baseURL+"/api/v1/vcs/create/services", wrapper.CreateVcRecordServices)
	router.POST(baseURL+"/api/v1/vcs/revoke", wrapper.RevokeVcRecord)
	router.GET(baseURL+"/api/v1/vcs/:vcUri", wrapper.GetVcRecordById)
	router.POST(baseURL+"/api/v1/vps/verify/bms", wrapper.VerifyVpBms)
	router.POST(baseURL+"/api/v1/vps/verify/cloud", wrapper.VerifyVpCloud)
	router.POST(baseURL+"/api/v1/vps/verify/services", wrapper.VerifyVpServices)

}
