package handlers

import (
	"blockchain/internal/api/web/server/models"
	"fmt"
	"github.com/labstack/echo/v4"
	"github.com/xeipuuv/gojsonschema"
	"log"
	"net/http"
)

func (s *MyServer) GetBlockTransactions(ctx echo.Context, blockID int) error {
	result, err := s.TransactionService.GetTransactions(ctx.Request().Context(), blockID)
	if err != nil {
		// You might want to distinguish between 400 and 500 errors based on the 'err' value
		// For simplicity, here we're returning 400 for any service error.
		return ctx.JSON(http.StatusBadRequest, models.ResponseErrorSchema{Message: err.Error()})
	}

	documentLoader := gojsonschema.NewGoLoader(*result) // Use NewGoLoader with the dereferenced slice

	validationResult, validateErr := s.responseTransactionsSchema.Validate(documentLoader)
	if validateErr != nil {
		log.Printf("Internal error during outgoing response schema validation (block %d): %v", blockID, validateErr)
		return ctx.JSON(http.StatusInternalServerError, models.ResponseErrorSchema{Message: "Internal server error during response validation process"})
	}

	if !validationResult.Valid() {
		validationErrors := make([]string, 0)
		for _, desc := range validationResult.Errors() {
			validationErrors = append(validationErrors, fmt.Sprintf("Field: %s, Description: %s, Type: %s", desc.Field(), desc.Description(), desc.Type()))
		}
		log.Printf("CRITICAL: Outgoing block transactions for block %d do NOT conform to schema! Errors: %v", blockID, validationErrors)
		return ctx.JSON(http.StatusInternalServerError, models.ResponseErrorSchema{Message: "Internal server error: Malformed response data generated by server"})
	}

	return ctx.JSON(http.StatusOK, result)
}
