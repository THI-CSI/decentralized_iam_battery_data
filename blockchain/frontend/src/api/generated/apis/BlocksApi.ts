/* tslint:disable */
/* eslint-disable */
/**
 * Blockchain API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResponseBlockSchema,
  ResponseTransactionsSchemaInner,
} from '../models/index';

export interface GetBlockByIdRequest {
    blockId: number;
}

export interface GetBlockTransactionsRequest {
    blockId: number;
}

/**
 * 
 */
export class BlocksApi extends runtime.BaseAPI {

    /**
     * Get all blocks of the blockchain
     */
    async getAllBlocksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResponseBlockSchema>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all blocks of the blockchain
     */
    async getAllBlocks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResponseBlockSchema>> {
        const response = await this.getAllBlocksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a block of the blockchain by ID
     */
    async getBlockByIdRaw(requestParameters: GetBlockByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBlockSchema>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling getBlockById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/blocks/{blockId}`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a block of the blockchain by ID
     */
    async getBlockById(requestParameters: GetBlockByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBlockSchema> {
        const response = await this.getBlockByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all transactions of a specific block
     */
    async getBlockTransactionsRaw(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ResponseTransactionsSchemaInner>>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling getBlockTransactions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/blocks/{blockId}/transactions`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all transactions of a specific block
     */
    async getBlockTransactions(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ResponseTransactionsSchemaInner>> {
        const response = await this.getBlockTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
