/* tslint:disable */
/* eslint-disable */
/**
 * Blockchain API
 * This is the api for the blockchain
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DomainBlockResponse,
  DomainErrorResponseHTTP,
} from '../models/index';

export interface ApiV1BlocksBlockIdGetRequest {
    blockId: number;
}

export interface ApiV1BlocksBlockIdTransactionsGetRequest {
    blockId: number;
}

/**
 * 
 */
export class BlocksApi extends runtime.BaseAPI {

    /**
     * Get a block of the blockchain by id
     * Get a block by id
     */
    async apiV1BlocksBlockIdGetRaw(requestParameters: ApiV1BlocksBlockIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainBlockResponse>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling apiV1BlocksBlockIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/blocks/{blockId}`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a block of the blockchain by id
     * Get a block by id
     */
    async apiV1BlocksBlockIdGet(requestParameters: ApiV1BlocksBlockIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainBlockResponse> {
        const response = await this.apiV1BlocksBlockIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all transactions of a block
     * Get all transactions of a block
     */
    async apiV1BlocksBlockIdTransactionsGetRaw(requestParameters: ApiV1BlocksBlockIdTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any | undefined; }>>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling apiV1BlocksBlockIdTransactionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/blocks/{blockId}/transactions`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all transactions of a block
     * Get all transactions of a block
     */
    async apiV1BlocksBlockIdTransactionsGet(requestParameters: ApiV1BlocksBlockIdTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any | undefined; }>> {
        const response = await this.apiV1BlocksBlockIdTransactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all blocks of the blockchain
     * Get all blocks
     */
    async apiV1BlocksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainBlockResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all blocks of the blockchain
     * Get all blocks
     */
    async apiV1BlocksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainBlockResponse>> {
        const response = await this.apiV1BlocksGetRaw(initOverrides);
        return await response.value();
    }

}
