/* tslint:disable */
/* eslint-disable */
/**
 * Blockchain API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateVcRecord201Response,
  CreateVcRecord400Response,
  RequestVcCreateSchema,
  RequestVcRevokeSchema,
  RequestVcVerifySchema,
  ResponseVcVerifySchema,
  RevokeVcRecord201Response,
} from '../models/index';

export interface CreateVcRecordRequest {
    RequestVcCreateSchema: RequestVcCreateSchema;
}

export interface RevokeVcRecordRequest {
    RequestVcRevokeSchema: RequestVcRevokeSchema;
}

export interface VerifyVcRecordRequest {
    RequestVcVerifySchema: RequestVcVerifySchema;
}

/**
 * 
 */
export class VCApi extends runtime.BaseAPI {

    /**
     * Create a VC Record
     */
    async createVcRecordRaw(requestParameters: CreateVcRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateVcRecord201Response>> {
        if (requestParameters['RequestVcCreateSchema'] == null) {
            throw new runtime.RequiredError(
                'RequestVcCreateSchema',
                'Required parameter "RequestVcCreateSchema" was null or undefined when calling createVcRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/vc/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['RequestVcCreateSchema'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a VC Record
     */
    async createVcRecord(requestParameters: CreateVcRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateVcRecord201Response> {
        const response = await this.createVcRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke a VC Record
     */
    async revokeVcRecordRaw(requestParameters: RevokeVcRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevokeVcRecord201Response>> {
        if (requestParameters['RequestVcRevokeSchema'] == null) {
            throw new runtime.RequiredError(
                'RequestVcRevokeSchema',
                'Required parameter "RequestVcRevokeSchema" was null or undefined when calling revokeVcRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/vc/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['RequestVcRevokeSchema'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Revoke a VC Record
     */
    async revokeVcRecord(requestParameters: RevokeVcRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevokeVcRecord201Response> {
        const response = await this.revokeVcRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify a VC Record
     */
    async verifyVcRecordRaw(requestParameters: VerifyVcRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseVcVerifySchema>> {
        if (requestParameters['RequestVcVerifySchema'] == null) {
            throw new runtime.RequiredError(
                'RequestVcVerifySchema',
                'Required parameter "RequestVcVerifySchema" was null or undefined when calling verifyVcRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/vc/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['RequestVcVerifySchema'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Verify a VC Record
     */
    async verifyVcRecord(requestParameters: VerifyVcRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseVcVerifySchema> {
        const response = await this.verifyVcRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
