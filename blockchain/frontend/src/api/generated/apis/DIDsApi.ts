/* tslint:disable */
/* eslint-disable */
/**
 * Blockchain API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrModifyDid201Response,
  CreateVcRecord400Response,
  DidSchema,
  RequestDidCreateormodifySchema,
  RequestDidRevokeSchema,
  RevokeDid201Response,
} from '../models/index';

export interface CreateOrModifyDidRequest {
    RequestDidCreateormodifySchema: RequestDidCreateormodifySchema;
}

export interface GetDidByIdRequest {
    did: string;
}

export interface RevokeDidRequest {
    RequestDidRevokeSchema: RequestDidRevokeSchema;
}

/**
 * 
 */
export class DIDsApi extends runtime.BaseAPI {

    /**
     * Create or modify a DID document
     */
    async createOrModifyDidRaw(requestParameters: CreateOrModifyDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrModifyDid201Response>> {
        if (requestParameters['RequestDidCreateormodifySchema'] == null) {
            throw new runtime.RequiredError(
                'RequestDidCreateormodifySchema',
                'Required parameter "RequestDidCreateormodifySchema" was null or undefined when calling createOrModifyDid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/dids/createormodify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['RequestDidCreateormodifySchema'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create or modify a DID document
     */
    async createOrModifyDid(requestParameters: CreateOrModifyDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrModifyDid201Response> {
        const response = await this.createOrModifyDidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all DIDs from the blockchain
     */
    async getAllDidsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DidSchema>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/dids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all DIDs from the blockchain
     */
    async getAllDids(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DidSchema>> {
        const response = await this.getAllDidsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a specific DID Document by its DID
     */
    async getDidByIdRaw(requestParameters: GetDidByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DidSchema>> {
        if (requestParameters['did'] == null) {
            throw new runtime.RequiredError(
                'did',
                'Required parameter "did" was null or undefined when calling getDidById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/dids/{did}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters['did']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a specific DID Document by its DID
     */
    async getDidById(requestParameters: GetDidByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DidSchema> {
        const response = await this.getDidByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke a DID document
     */
    async revokeDidRaw(requestParameters: RevokeDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevokeDid201Response>> {
        if (requestParameters['RequestDidRevokeSchema'] == null) {
            throw new runtime.RequiredError(
                'RequestDidRevokeSchema',
                'Required parameter "RequestDidRevokeSchema" was null or undefined when calling revokeDid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/dids/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['RequestDidRevokeSchema'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Revoke a DID document
     */
    async revokeDid(requestParameters: RevokeDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevokeDid201Response> {
        const response = await this.revokeDidRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
