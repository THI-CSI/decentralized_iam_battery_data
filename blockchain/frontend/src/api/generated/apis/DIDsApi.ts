/* tslint:disable */
/* eslint-disable */
/**
 * Blockchain API
 * This is the api for the blockchain
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreDid,
  DomainCreateDid,
  DomainErrorResponseHTTP,
} from '../models/index';

export interface ApiV1DidsDidDeleteRequest {
    did: string;
}

export interface ApiV1DidsDidGetRequest {
    did: string;
}

export interface ApiV1DidsPostRequest {
    recipe: DomainCreateDid;
}

/**
 * 
 */
export class DIDsApi extends runtime.BaseAPI {

    /**
     * Revokes a DID on the blockchain and creates a new transaction
     * Revokes a DID
     */
    async apiV1DidsDidDeleteRaw(requestParameters: ApiV1DidsDidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['did'] == null) {
            throw new runtime.RequiredError(
                'did',
                'Required parameter "did" was null or undefined when calling apiV1DidsDidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/dids/{did}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters['did']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes a DID on the blockchain and creates a new transaction
     * Revokes a DID
     */
    async apiV1DidsDidDelete(requestParameters: ApiV1DidsDidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1DidsDidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a DID from the blockchain
     * Get a single DID
     */
    async apiV1DidsDidGetRaw(requestParameters: ApiV1DidsDidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreDid>> {
        if (requestParameters['did'] == null) {
            throw new runtime.RequiredError(
                'did',
                'Required parameter "did" was null or undefined when calling apiV1DidsDidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/dids/{did}`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters['did']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a DID from the blockchain
     * Get a single DID
     */
    async apiV1DidsDidGet(requestParameters: ApiV1DidsDidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreDid> {
        const response = await this.apiV1DidsDidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all DIDs from the blockchain
     * Get all DIDs
     */
    async apiV1DidsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoreDid>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/dids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all DIDs from the blockchain
     * Get all DIDs
     */
    async apiV1DidsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoreDid>> {
        const response = await this.apiV1DidsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new DID on the blockchain
     * Create a new DID
     */
    async apiV1DidsPostRaw(requestParameters: ApiV1DidsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreDid>> {
        if (requestParameters['recipe'] == null) {
            throw new runtime.RequiredError(
                'recipe',
                'Required parameter "recipe" was null or undefined when calling apiV1DidsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/dids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['recipe'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new DID on the blockchain
     * Create a new DID
     */
    async apiV1DidsPost(requestParameters: ApiV1DidsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreDid> {
        const response = await this.apiV1DidsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
