/* tslint:disable */
/* eslint-disable */
/**
 * Blockchain API
 * This is the api for the blockchain
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreVCRecord,
  DomainErrorResponseHTTP,
  DomainVCRequest,
} from '../models/index';

export interface ApiV1DidsDidVcPostRequest {
    did: string;
    vc: DomainVCRequest;
}

export interface ApiV1VcUrnGetRequest {
    urn: string;
}

/**
 * 
 */
export class VCsApi extends runtime.BaseAPI {

    /**
     * Create a new VC on the blockchain
     * Create a new VC
     */
    async apiV1DidsDidVcPostRaw(requestParameters: ApiV1DidsDidVcPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreVCRecord>> {
        if (requestParameters['did'] == null) {
            throw new runtime.RequiredError(
                'did',
                'Required parameter "did" was null or undefined when calling apiV1DidsDidVcPost().'
            );
        }

        if (requestParameters['vc'] == null) {
            throw new runtime.RequiredError(
                'vc',
                'Required parameter "vc" was null or undefined when calling apiV1DidsDidVcPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/dids/{did}/vc`.replace(`{${"did"}}`, encodeURIComponent(String(requestParameters['did']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['vc'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new VC on the blockchain
     * Create a new VC
     */
    async apiV1DidsDidVcPost(requestParameters: ApiV1DidsDidVcPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreVCRecord> {
        const response = await this.apiV1DidsDidVcPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a VC Record from the blockchain
     * Get a VC Record
     */
    async apiV1VcUrnGetRaw(requestParameters: ApiV1VcUrnGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreVCRecord>> {
        if (requestParameters['urn'] == null) {
            throw new runtime.RequiredError(
                'urn',
                'Required parameter "urn" was null or undefined when calling apiV1VcUrnGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/vc/{urn}`.replace(`{${"urn"}}`, encodeURIComponent(String(requestParameters['urn']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a VC Record from the blockchain
     * Get a VC Record
     */
    async apiV1VcUrnGet(requestParameters: ApiV1VcUrnGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreVCRecord> {
        const response = await this.apiV1VcUrnGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
