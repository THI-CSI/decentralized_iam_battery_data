/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as DidsIndexImport } from './routes/dids/index'
import { Route as BlocksIndexImport } from './routes/blocks/index'
import { Route as DidsDidIdIndexImport } from './routes/dids/$didId/index'
import { Route as BlocksBlockIdIndexImport } from './routes/blocks/$blockId/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DidsIndexRoute = DidsIndexImport.update({
  id: '/dids/',
  path: '/dids/',
  getParentRoute: () => rootRoute,
} as any)

const BlocksIndexRoute = BlocksIndexImport.update({
  id: '/blocks/',
  path: '/blocks/',
  getParentRoute: () => rootRoute,
} as any)

const DidsDidIdIndexRoute = DidsDidIdIndexImport.update({
  id: '/dids/$didId/',
  path: '/dids/$didId/',
  getParentRoute: () => rootRoute,
} as any)

const BlocksBlockIdIndexRoute = BlocksBlockIdIndexImport.update({
  id: '/blocks/$blockId/',
  path: '/blocks/$blockId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/blocks/': {
      id: '/blocks/'
      path: '/blocks'
      fullPath: '/blocks'
      preLoaderRoute: typeof BlocksIndexImport
      parentRoute: typeof rootRoute
    }
    '/dids/': {
      id: '/dids/'
      path: '/dids'
      fullPath: '/dids'
      preLoaderRoute: typeof DidsIndexImport
      parentRoute: typeof rootRoute
    }
    '/blocks/$blockId/': {
      id: '/blocks/$blockId/'
      path: '/blocks/$blockId'
      fullPath: '/blocks/$blockId'
      preLoaderRoute: typeof BlocksBlockIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/dids/$didId/': {
      id: '/dids/$didId/'
      path: '/dids/$didId'
      fullPath: '/dids/$didId'
      preLoaderRoute: typeof DidsDidIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blocks': typeof BlocksIndexRoute
  '/dids': typeof DidsIndexRoute
  '/blocks/$blockId': typeof BlocksBlockIdIndexRoute
  '/dids/$didId': typeof DidsDidIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blocks': typeof BlocksIndexRoute
  '/dids': typeof DidsIndexRoute
  '/blocks/$blockId': typeof BlocksBlockIdIndexRoute
  '/dids/$didId': typeof DidsDidIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/blocks/': typeof BlocksIndexRoute
  '/dids/': typeof DidsIndexRoute
  '/blocks/$blockId/': typeof BlocksBlockIdIndexRoute
  '/dids/$didId/': typeof DidsDidIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/blocks' | '/dids' | '/blocks/$blockId' | '/dids/$didId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/blocks' | '/dids' | '/blocks/$blockId' | '/dids/$didId'
  id:
    | '__root__'
    | '/'
    | '/blocks/'
    | '/dids/'
    | '/blocks/$blockId/'
    | '/dids/$didId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlocksIndexRoute: typeof BlocksIndexRoute
  DidsIndexRoute: typeof DidsIndexRoute
  BlocksBlockIdIndexRoute: typeof BlocksBlockIdIndexRoute
  DidsDidIdIndexRoute: typeof DidsDidIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlocksIndexRoute: BlocksIndexRoute,
  DidsIndexRoute: DidsIndexRoute,
  BlocksBlockIdIndexRoute: BlocksBlockIdIndexRoute,
  DidsDidIdIndexRoute: DidsDidIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blocks/",
        "/dids/",
        "/blocks/$blockId/",
        "/dids/$didId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/blocks/": {
      "filePath": "blocks/index.tsx"
    },
    "/dids/": {
      "filePath": "dids/index.tsx"
    },
    "/blocks/$blockId/": {
      "filePath": "blocks/$blockId/index.tsx"
    },
    "/dids/$didId/": {
      "filePath": "dids/$didId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
