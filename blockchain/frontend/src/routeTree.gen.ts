/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DidsIndexRouteImport } from './routes/dids/index'
import { Route as BlocksIndexRouteImport } from './routes/blocks/index'
import { Route as SchemasSchema_nameIndexRouteImport } from './routes/schemas/$schema_name/index'
import { Route as DidsDidIdIndexRouteImport } from './routes/dids/$didId/index'
import { Route as BlocksBlockIdIndexRouteImport } from './routes/blocks/$blockId/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DidsIndexRoute = DidsIndexRouteImport.update({
  id: '/dids/',
  path: '/dids/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlocksIndexRoute = BlocksIndexRouteImport.update({
  id: '/blocks/',
  path: '/blocks/',
  getParentRoute: () => rootRouteImport,
} as any)
const SchemasSchema_nameIndexRoute = SchemasSchema_nameIndexRouteImport.update({
  id: '/schemas/$schema_name/',
  path: '/schemas/$schema_name/',
  getParentRoute: () => rootRouteImport,
} as any)
const DidsDidIdIndexRoute = DidsDidIdIndexRouteImport.update({
  id: '/dids/$didId/',
  path: '/dids/$didId/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlocksBlockIdIndexRoute = BlocksBlockIdIndexRouteImport.update({
  id: '/blocks/$blockId/',
  path: '/blocks/$blockId/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blocks': typeof BlocksIndexRoute
  '/dids': typeof DidsIndexRoute
  '/blocks/$blockId': typeof BlocksBlockIdIndexRoute
  '/dids/$didId': typeof DidsDidIdIndexRoute
  '/schemas/$schema_name': typeof SchemasSchema_nameIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blocks': typeof BlocksIndexRoute
  '/dids': typeof DidsIndexRoute
  '/blocks/$blockId': typeof BlocksBlockIdIndexRoute
  '/dids/$didId': typeof DidsDidIdIndexRoute
  '/schemas/$schema_name': typeof SchemasSchema_nameIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blocks/': typeof BlocksIndexRoute
  '/dids/': typeof DidsIndexRoute
  '/blocks/$blockId/': typeof BlocksBlockIdIndexRoute
  '/dids/$didId/': typeof DidsDidIdIndexRoute
  '/schemas/$schema_name/': typeof SchemasSchema_nameIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blocks'
    | '/dids'
    | '/blocks/$blockId'
    | '/dids/$didId'
    | '/schemas/$schema_name'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blocks'
    | '/dids'
    | '/blocks/$blockId'
    | '/dids/$didId'
    | '/schemas/$schema_name'
  id:
    | '__root__'
    | '/'
    | '/blocks/'
    | '/dids/'
    | '/blocks/$blockId/'
    | '/dids/$didId/'
    | '/schemas/$schema_name/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlocksIndexRoute: typeof BlocksIndexRoute
  DidsIndexRoute: typeof DidsIndexRoute
  BlocksBlockIdIndexRoute: typeof BlocksBlockIdIndexRoute
  DidsDidIdIndexRoute: typeof DidsDidIdIndexRoute
  SchemasSchema_nameIndexRoute: typeof SchemasSchema_nameIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dids/': {
      id: '/dids/'
      path: '/dids'
      fullPath: '/dids'
      preLoaderRoute: typeof DidsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/': {
      id: '/blocks/'
      path: '/blocks'
      fullPath: '/blocks'
      preLoaderRoute: typeof BlocksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/schemas/$schema_name/': {
      id: '/schemas/$schema_name/'
      path: '/schemas/$schema_name'
      fullPath: '/schemas/$schema_name'
      preLoaderRoute: typeof SchemasSchema_nameIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dids/$didId/': {
      id: '/dids/$didId/'
      path: '/dids/$didId'
      fullPath: '/dids/$didId'
      preLoaderRoute: typeof DidsDidIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/$blockId/': {
      id: '/blocks/$blockId/'
      path: '/blocks/$blockId'
      fullPath: '/blocks/$blockId'
      preLoaderRoute: typeof BlocksBlockIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlocksIndexRoute: BlocksIndexRoute,
  DidsIndexRoute: DidsIndexRoute,
  BlocksBlockIdIndexRoute: BlocksBlockIdIndexRoute,
  DidsDidIdIndexRoute: DidsDidIdIndexRoute,
  SchemasSchema_nameIndexRoute: SchemasSchema_nameIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
